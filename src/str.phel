(ns smeghead\str)

(defn split
  "Splits string on a regular expression.  Optional argument limit is
  the maximum number of parts. Not lazy. Returns vector of the parts.
  Trailing empty strings are not returned - pass limit of -1 to return all."
  [s re & [limit]]
  (values (php-array-to-map (php/preg_split re s (or limit -1)))))

(defn reverse
  "Returns s with its characters reversed."
  [s]
  (php/strrev s))

(defn upper-case
  "Converts string to all upper-case."
  [s]
  (php/strtoupper s))

(defn replace
  "Replaces all instance of match with replacement in s.

   match/replacement can be:

   string / string
   pattern / (string or function of match).

   See also replace-first.

   The replacement is literal (i.e. none of its characters are treated
   specially) for all cases above except pattern / string.

   For pattern / string, $1, $2, etc. in the replacement string are
   substituted with the string that matched the corresponding
   parenthesized group in the pattern.  If you wish your replacement
   string r to be used literally, use (re-quote-replacement r) as the
   replacement argument.  See also documentation for
   java.util.regex.Matcher's appendReplacement method."
  [s match replacement]
  (let [match (if (and
                    (> (php/mb_strlen match) 1)
                    (=
                      (php/substr match 0 1)
                      (php/substr match -1 1)))
                match
                (format "/%s/" (php/preg_quote match "/")))]
    (if (function? replacement)
      (php/preg_replace_callback match (fn [x]
                                         (let [x (values (php-array-to-map x))]
                                           (apply replacement x))) s)
      (php/preg_replace match replacement s))))

(defn join
  "Returns a string of all elements in coll, as returned by (seq coll),
   separated by an optional separator."
  [separator & [coll]]
  (let [[coll separator] (if (nil? coll) [separator ""] [coll separator])]
    (php/implode separator (to-php-array coll))))
